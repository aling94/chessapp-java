package ChessGUI;

import Chess.Game.ChessGame;
import Chess.Game.CustomChessGame;
import Chess.Game.Game;
import Chess.Game.Game.GameState;
import static Chess.Game.Game.GameState.*;

import Chess.Move;
import static Chess.Pieces.Piece.PieceColor.*;

import Chess.Pieces.Piece.PieceColor;
import Chess.Square;

import javax.swing.*;
import java.awt.*;
import java.util.HashSet;

/**
 * Controller class for the Chess view (ChessGUI)
 */
public class ChessGUIController
{
    private Game chessGame;
    private ChessGUI chessGUI;
    private Square currentFrom;
    private HashSet<Square> currentMoveset;

    private boolean isFirstClick = true;
    private boolean gameInSession = false;

    public static void main(String[] args)
    {
        ChessGUIController cgc = new ChessGUIController();
        cgc.init();
    }

    /**
     * Initializes all the ActionListeners needed by the ChessGUI to run as a game.
     */
    public void init()
    {
        chessGUI = new ChessGUI();

        // Set the default listener for the squares
        chessGUI.addSquareListerner(e -> displayMsg("Please start a new game.", "No game in session"));

        // Lambda functions are cool
        chessGUI.addNewGameListener(e -> startNewGame());

        chessGUI.addForfeitListener(e -> forfeitGame());

        chessGUI.addUndoListener(e -> undoMove());
    }

    /**
     * Function to be called when user presses the New Game button. Prompts the user for the desired Game mode and
     * loads in the appropriate Game object and sets up the board. If a new game is being started before the current one
     * has ended, will ask for confirmation.
     */
    private void startNewGame()
    {
        if(gameInSession)         // If a game is in session, ask if they really want to restart
        {
            if(!confirmNewGame(WHITE) || !confirmNewGame(BLACK)) return;  // If either player says no, return
        }
        Game mode = promptGameMode();
        if(mode != null)
        {
            chessGame = mode;
            chessGUI.setupGame(chessGame);  // This inits a brand new board with new SquareButtons for the game
            currentFrom = null;
            currentMoveset = null;
            isFirstClick = true;
            gameInSession = true;
            setTurnColor();
            initSquareListeners();          // for which we need to init their ActionListeners
        }
    }

    /**
     * Function to be called when the Forfeit Game button is pressed. Alerts the users that the current moving player
     * has forfeited. Then increments the score of the "Winner" and ends the current game session.
     */
    private void forfeitGame()
    {
        if(gameInSession)
        {
            chessGUI.incrementScore(chessGame.getOpposingColor());
            String forfeiter = chessGUI.getPlayerName(chessGame.getTurnColor());
            displayMsg(forfeiter + " forfeits!", "Forfeit!");
            gameInSession = false;
        }
        else displayMsg("Please start a new game.", "No game in session");
    }

    /**
     * Function to be done when a SquareButton is clicked on the first click. Will obtain all legal moves for the piece
     * at the clicked Square and highlight them. Also stores the clicked Square and the legal moves generated.
     * @param from Square
     */
    private void highlightMoves(Square from)
    {
        currentFrom = from;
        currentMoveset = chessGame.getLegalMoves(currentFrom);
        if(currentMoveset.isEmpty())
        {
            isFirstClick = true;
            return;
        }
        isFirstClick = false;
        for(Square sqr : currentMoveset)
            chessGUI.highlightSquare(sqr.x, sqr.y);
    }

    /**
     * Function to be done when a SquareButton is clicked on the second click. Will check the clicked Square against
     * the set of legal moves generated by the first click. If the destination Square is one of the legal moves,
     * performs the move in the internal Game as well as updates the GUI to represent the move made.
     * @param dest Square
     */
    private void attemptMove(Square dest)
    {
        isFirstClick = true;
        for(Square sqr : currentMoveset)
            chessGUI.unHighlightSquare(sqr.x, sqr.y);
        if(currentMoveset.contains(dest))
        {
            chessGame.runTurn(currentFrom, dest);
            chessGUI.moveSquareIcon(currentFrom, dest);
            validateGameState();
            setTurnColor();
        }
        currentMoveset = null;
        currentFrom = null;
    }

    /**
     * Function to be done when the undo button is clicked. Will undo the move in the internal Game and updated the GUI
     * accordingly. Does nothing if there are no moves to undo.
     */
    private void undoMove()
    {
        if(gameInSession)
        {
            Move mv = chessGame.undoMove();
            if (mv == null)
            {
                displayMsg("No moves to undo.", "Nothing to undo");
                return;
            }
            chessGUI.moveSquareIcon(mv.dest, mv.from);
            if (mv.capturedPiece != null)
                chessGUI.setSquareIcon(mv.dest, mv.capturedPiece.getIcon());
            validateGameState();
            setTurnColor();
        }
        else displayMsg("Please start a new game.", "No game in session");
    }

    /**
     * Checks if check/checkmate/stalemate has occurred and updates the appropriate flags. Also alerts the users. If the
     * state is an end game state (checkmate/stalemate) then the game session is ended and the appropriate player(s)
     * scores will be updated.
     */
    private void validateGameState()
    {
        String whiteName = chessGUI.getPlayerName(WHITE);
        String blackName = chessGUI.getPlayerName(BLACK);
        GameState state = chessGame.getGameState();
        switch(state)
        {
            default : return;
            case BLACK_IN_CHECK : displayMsg(blackName + " is in Check!", "CHECK!"); break;
            case WHITE_IN_CHECK : displayMsg(whiteName + " is in Check!", "CHECK!"); break;

            case BLACK_WINS     : displayMsg(blackName + " wins! Checkmate!", "CHECKMATE!");
                                  chessGUI.incrementScore(BLACK); break;

            case WHITE_WINS     : displayMsg(whiteName + " wins! Checkmate!", "CHECKMATE!");
                                  chessGUI.incrementScore(WHITE); break;

            case STALEMATE      : displayMsg("Stalemate!", "STALEMATE!");
        }
        if(state == WHITE_WINS || state == BLACK_WINS || state == STALEMATE) // Game has ended if any of these are true
            gameInSession = false;
    }

    /**
     * Helper function for initializing the ActionListener of the SquareButtons in the GUI. The ActionListener retrieves
     * the Square that this button represents and calls highlightMoves or attemptMoves depending on whether it was the
     * first or second click.
     */
    private void initSquareListeners()
    {
        chessGUI.addSquareListerner(e ->
        {
            if (!gameInSession)
            {
                displayMsg("Please start a new game.", "No game in session");
                return;
            }
            Square clickedSqr = ((SquareButton) e.getSource()).loc;
            if (isFirstClick) highlightMoves(clickedSqr);
            else attemptMove(clickedSqr);
        });
    }

    private void setTurnColor()
    {
        if(chessGame.getTurnColor() == WHITE)
            chessGUI.setNameColors(Color.BLUE, Color.BLACK);
        else
            chessGUI.setNameColors(Color.BLACK, Color.BLUE);
    }

    /**
     * Prompts the user to select a Game mode (Standard or Custom).
     * @return Game
     */
    private Game promptGameMode()
    {
        Game[] modes = {new ChessGame(), new CustomChessGame()};
        return (Game) JOptionPane.showInputDialog(null, "Choose the Game mode:", "Game mode selection",
                        JOptionPane.QUESTION_MESSAGE, null, modes, modes[0]);
    }

    /**
     * Displays a JOptionPane with the message and title.
     * @param msg String
     * @param windowTitle String
     */
    private void displayMsg(String msg, String windowTitle)
    {
        JOptionPane.showMessageDialog (null, msg, windowTitle, JOptionPane.PLAIN_MESSAGE);
    }

    /**
     * Displays a confirmation window asking the player specified by playerColor if they want to restart the game.
     * Returns true if they answered Yes.
     * @param playerColor PieceColor
     * @return boolean
     */
    private boolean confirmNewGame(PieceColor playerColor)
    {
        String playerName = chessGUI.getPlayerName(playerColor);
        int reply = JOptionPane.showConfirmDialog(null, "Does " + playerName + " want to restart?", "New Game?",
                JOptionPane.YES_NO_OPTION);
        return reply == JOptionPane.YES_OPTION;
    }
}
